*problem solving: The process of formulating a problem, finding a solution, and expressing it.
*high-level language: A programming language like Python that is designed to be easy for
humans to read and write.
*low-level language: A programming language that is designed to be easy for a computer
to run; also called “machine language” or “assembly language”.
*portability: A property of a program that can run on more than one kind of computer.
*interpreter: A program that reads another program and executes it
*prompt: Characters displayed by the interpreter to indicate that it is ready to take input
from the user.
*program: A set of instructions that specifies a computation
*print statement: An instruction that causes the Python interpreter to display a value on
the screen.
*operator: A special symbol that represents a simple computation like addition, multiplication, or string concatenation.
*value: One of the basic units of data, like a number or string, that a program manipulates.
*type: A category of values. The types we have seen so far are integers (type int), floatingpoint numbers (type float), and strings (type str).
*integer: A type that represents whole numbers.
*floating-point: A type that represents numbers with fractional parts.
*string: A type that represents sequences of characters.
*natural language: Any one of the languages that people speak that evolved naturally.
*formal language: Any one of the languages that people have designed for specific purposes, such as representing mathematical ideas or computer programs; all programming languages are formal languages.
*token: One of the basic elements of the syntactic structure of a program, analogous to a
word in a natural language.
*syntax: The rules that govern the structure of a program.
*parse: To examine a program and analyze the syntactic structure.
*bug: An error in a program.
*debugging: The process of finding and correcting bugs.
*variable: A name that refers to a value.
*assignment: A statement that assigns a value to a variable.
*state diagram: A graphical representation of a set of variables and the values they refer to.
*keyword: A reserved word that is used to parse a program; you cannot use keywords like
if, def, and while as variable names.
*operand: One of the values on which an operator operates.
*expression: A combination of variables, operators, and values that represents a single result.
*evaluate: To simplify an expression by performing the operations in order to yield a single
value.
*statement: A section of code that represents a command or action. So far, the statements
we have seen are assignments and print statements.
*execute: To run a statement and do what it says.
*interactive mode: A way of using the Python interpreter by typing code at the prompt.
*script mode: A way of using the Python interpreter to read code from a script and run it.
*script: A program stored in a file.
*order of operations: Rules governing the order in which expressions involving multiple
operators and operands are evaluated.
*concatenate: To join two operands end-to-end.
*comment: Information in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program.
*syntax error: An error in a program that makes it impossible to parse (and therefore impossible to interpret).
*exception: An error that is detected while the program is running.
*semantics: The meaning of a program.
*semantic error: An error in a program that makes it do something other than what the
programmer intended.
*function: A named sequence of statements that performs some useful operation. Functions may or may not take arguments and may or may not produce a result.
*function definition: A statement that creates a new function, specifying its name, parameters, and the statements it contains.
*function object: A value created by a function definition. The name of the function is a
variable that refers to a function object.
*header: The first line of a function definition
*body: The sequence of statements inside a function definition.
*parameter: A name used inside a function to refer to the value passed as an argument.
*function call: A statement that runs a function. It consists of the function name followed
by an argument list in parentheses.
*argument: A value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.
*local variable: A variable defined inside a function. A local variable can only be used
inside its function.
*return value: The result of a function. If a function call is used as an expression, the return
value is the value of the expression.
*fruitful function: A function that returns a value.
*void function: A function that always returns None.
*None: A special value returned by void functions.
*module: A file that contains a collection of related functions and other definitions.
*import statement: A statement that reads a module file and creates a module object.
*module object: A value created by an import statement that provides access to the values
defined in a module.
*dot notation: The syntax for calling a function in another module by specifying the module name followed by a dot (period) and the function name.
*composition: Using an expression as part of a larger expression, or a statement as part of
a larger statement.
*flow of execution: The order statements run in.
*stack diagram: A graphical representation of a stack of functions, their variables, and the
values they refer to
*frame: A box in a stack diagram that represents a function call. It contains the local variables and parameters of the function.
*traceback: A list of the functions that are executing, printed when an exception occurs.
*method: A function that is associated with an object and called using dot notation.
*loop: A part of a program that can run repeatedly.
*encapsulation: The process of transforming a sequence of statements into a function definition.
*generalization: The process of replacing something unnecessarily specific (like a number)
with something appropriately general (like a variable or parameter).
*keyword argument: An argument that includes the name of the parameter as a “keyword”.
*interface: A description of how to use a function, including the name and descriptions of
the arguments and return value
*refactoring: The process of modifying a working program to improve function interfaces
and other qualities of the code.
*development plan: A process for writing programs.
*docstring: A string that appears at the top of a function definition to document the function’s interface.
*precondition: A requirement that should be satisfied by the caller before a function starts.
*postcondition: A requirement that should be satisfied by the function before it ends
